GenerateEntity

目次

1. GenerateEntity とは？
2. ライセンス
3. 動作環境
4. 使い方

-------------------------------------------------------------------------------
1. GenerateEntity とは？

GenerateEntity は Oracle Database のテーブル定義情報を用いて
Seasar2 の S2JDBC 用のエンティティクラスのソースコードを出力するスクリプトです。

■機能仕様
・GenerationGapパターンを使用
・生成ファイルの文字コード、改行コードを設定可能
・以下のアノテーション出力に対応(以下以外は自動出力されない)
　　@Table(schema = "スキーマ名")
　　@Id
　　@Temporal(TemporalType.TIMESTAMP)
　　@Lob(セットで@Basic(fetch = FetchType.LAZY)を付加)
　　@GeneratedValue
　　@SequenceGenerator
・テンプレートをカスタマイズすることで、出力結果をある程度カスタマイズ可能
・public フィールドのみに対応(privateフィールド、セッター/ゲッターは非対応)

・DB型とJava型のマッピング
　※ここに記載されていない型には未対応。
　※NUMBER型は、デフォルトでは桁・精度に関係なく Integer にマッピングされます。
　　BigDecimal 等他の数値型へのマッピングを行いたい場合は、設定ファイルに
　　マッピングを行いたいテーブル名、カラム名とマッピング先 Java データ型を指定することで
　　可能です。
　----------------------------------------------------
　DB型            | Java型
　----------------------------------------------------
　VARCHAR2        | String
　----------------------------------------------------
　NVARCHAR2       | String
　----------------------------------------------------
　CHAR            | String
　----------------------------------------------------
　NCHAR           | String
　----------------------------------------------------
　BLOB            | @Basic(fetch = FetchType.LAZY)
　                | @Lob
　                | byte[]
　----------------------------------------------------
　CLOB            | @Basic(fetch = FetchType.LAZY)
　                | @Lob
　                | String
　----------------------------------------------------
　NCLOB           | @Basic(fetch = FetchType.LAZY)
　                | @Lob
　                | String
　----------------------------------------------------
　LONG            | @Basic(fetch = FetchType.LAZY)
　                | @Lob
　                | String
　----------------------------------------------------
　NUMBER          | Integer(設定で個別に変更可能)
　----------------------------------------------------
　DATE            | @Temporal(TemporalType.TIMESTAMP)
　                | java.util.Date
　----------------------------------------------------
　TIMESTAMP       | @Temporal(TemporalType.TIMESTAMP)
　                | java.util.Date
　----------------------------------------------------

※カラム名が Java 予約語に該当する場合は、接頭語が付加されます。

-------------------------------------------------------------------------------
2. ライセンス

Apache License Version 2.0とします。

-------------------------------------------------------------------------------
3. 動作環境

GenerateEntity は以下の環境で動作確認をしています。

	クライアント：MS Windows XP Professional SP2
				　Oracle Client 10.1.0.2.0
	サーバー：Sun Solaris 10
	　　　　　MS Windows Server 2003
	　　　　　Oracle Database 10.1.0.2.0

また、Seasar2 は 2.4.25 を対象としています。

※環境としては、Windows 2000以降、Oracle 10g以降、
Seasar 2.4.18以降であれば動くと思います。

-------------------------------------------------------------------------------
4. 使い方

1)script.ini ファイルを開き、以下の値を環境に合わせて編集します。

　;DWHのORACLE接続サービス名
　Oracle_Sid=
　;Oracle接続ユーザー
　Oracle_User=
　;Oracle接続パスワード
　Oracle_Passwd=

　;生成ファイルのキャラクタセット(ex. utf-8, euc-jp, shift_jis デフォルトは"utf-8")
　Charset=
　;生成ファイルの改行コード(ex. CRLF, CR, LF デフォルトは"CRLF")
　NewLine=

　※1.DBの数値型のマッピング先Javaデータ型を個別に指定したい場合は、
　　　以下のように[MappingInfo]セクションで、マッピングを行いたいスキーマ名、テーブル名、カラム名と
　　　マッピング先 Java データ型を指定してください。
　　　なお、スキーマ名は省略可能です。
　　　
　　　;書式：[スキーマ名.]テーブル名.カラム名=Javaデータ型
　　　;例1.HOGEスキーマのFOOテーブルのXXXカラムを、BigDecimalにマッピングする
　　　;HOGE.FOO.XXX=BigDecimal
　　　;例2.FOOテーブルのXXXカラムを、Stringにマッピングする
　　　;FOO.XXX=String

　※2.Oracle シーケンスによる主キー値の自動生成を行う場合は、
　　　以下のように[SequenceInfo]セクションで、主キー値の自動生成を行いたいスキーマ名、テーブル名と
　　　シーケンス名を指定してください。
　　　なお、スキーマ名は省略可能です。
　　　また、シーケンス名がデータベースに存在しない場合は、WARNメッセージが出力されます。
　　　
　　　;書式：[スキーマ名.]テーブル名=シーケンス名
　　　;例1.HOGEスキーマのFOOテーブルの主キーにSEQ_BARを使用する
　　　;HOGE.FOO=SEQ_BAR
　　　;例2.FOOテーブルの主キーにSEQ_XXXを使用する
　　　;FOO=SEQ_XXX

　※3.関連定義の自動生成を行う場合は、
　　　以下のように[RelationshipInfo]セクションで、
　　　関連の所有者(外部キー相当のカラムを持つ側)のスキーマ名、テーブル名、カラム名と
　　　関連の被所有者(外部キー相当のカラムで参照される側)のスキーマ名、テーブル名、カラム名を指定してください。
　　　なお、スキーマ名は省略可能です。
　　　また、DBでは外部キーを作成せずにアプリケーション側で関連チェックをされていることも多いですので、
　　　iniファイルに定義されたものを自動生成する仕様としています。DBに外部キーが定義されている場合でも、
　　　自動生成には使用されませんのでご注意ください。
　　　
　　　;書式：関連の所有者(外部キー相当のカラムを持つ側)の[スキーマ名.]テーブル名.カラム名:関連の被所有者(外部キー相当のカラムで参照される側)の[スキーマ名.]テーブル名.カラム名=[1:1|*:1]
　　　;例1.HOGEスキーマのFOOテーブルのXXXカラムがBARテーブルのXXXカラムを1:1で参照する
　　　;HOGE.FOO.XXX:HOGE.BAR.XXX=1:1
　　　;例2.FOOテーブルのFOO_XXXカラムがBARテーブルのXXXカラムを多:1で参照する
　　　;FOO.FOO_XXX:BAR.XXX=*:1

　※4.任意のフィールドアノテーションを付加する場合は、
　　　以下のように[FieldAnnotationInfo]セクションで、アノテーションを付加したいフィールドに対応する
　　　スキーマ名、テーブル名、カラム名とフィールドアノテーション記述を指定してください。
　　　なお、スキーマ名、テーブル名は省略可能です。
　　　
　　　;書式：[スキーマ名.][テーブル名.]カラム名=フィールドアノテーション記述[|フィールドアノテーション記述]...
　　　;※アノテーション名はフルパッケージ名で指定してください。
　　　;※複数のアノテーションを指定する場合は、 | を区切りとして複数指定してください。
　　　;例1.全スキーマの全テーブルのCREATE_DATEフィールドにcom.example.generateentity.annotation.Sampleを付加する
　　　;CREATE_DATE=com.example.generateentity.annotation.Sample(arg0 = "hoge")
　　　;例2.HOGEスキーマのFOOテーブルのXXXカラムにcom.example.hoge.Fooと、Barを付加する
　　　;HOGE.FOO.XXX=com.example.hoge.Foo(xxx = "xxx")|com.example.hoge.Bar

2) コマンドプロンプトから以下のように実行します。
　カレントフォルダの直下にdistフォルダを作成し、その中にファイルが出力されます。

　テーブル名を指定して、1エンティティクラスを生成する場合
　　cd ファイル配置フォルダ
　　GenerateEntity [スキーマ名.]テーブル名

　すべてのテーブル分のエンティティクラスを生成する場合
　　cd ファイル配置フォルダ
　　GenerateEntity [スキーマ名.]*

　※スキーマ名を省略した場合は、script.ini に設定されているOracle 接続ユーザーの
　　所有テーブルが対象となります。
　　その場合、@Tableアノテーションにスキーマ名はつきません。
　　アプリケーションから複数のスキーマを使用する環境では、
　　スキーマ名を省略せずに指定してください。

・1テーブルにつき、１つの抽象エンティティスーパークラスと
　1つの具象エンティティサブクラスが生成されます。
　フィールド定義はすべて抽象クラスに定義されます。
　基本的には抽象クラスは常に自動生成するものとし、
　以降の開発では、抽象クラスは直接編集しないでください。
　メソッドの実装等は具象クラスに行います。
　テーブルスキーマの変更時は、再度 GenerateEntity を実行することで
　抽象クラスのみ更新されます。

　具象クラスが存在し、かつフィールドが定義されている場合、抽象クラスには
　具象クラスで定義されているフィールドは出力されません。
　本スクリプトでの自動生成が対応していないアノテーション指定を行う場合は、
　フィールド定義を抽象クラスから具象クラスに移動させてから
　アノテーションを記述することで、以降に本スクリプトを実行しても
　抽象クラス、具象クラス間でフィールド重複は起きないようになっています。
　また、具象クラスにテーブルに存在しないフィールドがtransientまたは@Transient指定なしに
　定義されている場合は、警告メッセージが出力されます。
